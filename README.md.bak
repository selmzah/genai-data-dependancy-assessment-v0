# Claudie : Project retro-documentation

<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href="#about-the-project">About The Project</a>
      <ul>
        <li><a href="#built-with">Built With</a></li>
      </ul>
    </li>
    <li>
      <a href="#getting-started">Getting Started</a>
      <ul>
        <li><a href="#prerequisites">Prerequisites</a></li>
        <li><a href="#installation">Installation</a></li>
      </ul>
    </li>
    <li><a href="#usage">Usage</a></li>
    <li><a href="#roadmap">Roadmap</a></li>
    <li><a href="#contributing">Contributing</a></li>
    <li><a href="#license">License</a></li>
    <li><a href="#contact">Contact</a></li>
    <li><a href="#acknowledgments">Acknowledgments</a></li>
  </ol>
</details>



<!-- ABOUT THE PROJECT -->
## About The Project

This project is an Azure project retro-documentation. 
It's an application which can generate documentation according to the giving template

Model: gpt-4-32k

Embeddings: No

Translation: No available for now

<p align="right">(<a href="#readme-top">back to top</a>)</p>


<!-- GETTING STARTED -->
## Getting Started

TODO

### Prerequisites
 
1. Have an access to https://gitlab.lafabric.ovh/gen-ai/azure/claudie
2. Have Docker Desktop installed
3. Have access to the Azure Portal
4. Have Python 3.10 installed

### Installation without docker (front/back)

1. Clone the project
   ```sh
   git clone https://gitlab.lafabric.ovh/gen-ai/azure/claudie.git
   ```
2. Set OPEN API keys in .env file (Available on the Azure Portal)
   ```sh
   OPENAI_API_BASE=<url>
   OPENAI_API_KEY=<token>
   LOGIN_NEO4J=<login>
   PASSWORD_NEO4J=<password>
   ```
3. Create two terminals :
   * FRONTEND
   * BACKEND

#### To Launch FRONTEND:

1. Install all the dependencies
   ```sh
   cd frontend
   npm install --force
   ```
2. Start frontend
   ```sh
   npm start
   ```

#### To Launch BACKEND

1. Create a virtual env
   ```
   python -m venv .venv
   ```

2. Install all the dependencies
   ```sh
   cd backend
   pip install -r requirement.txt
   ```
3. Start backend
   ```sh
   flask run
   ```

<p align="right">(<a href="#readme-top">back to top</a>)</p>

### Dockerized NEO4J

To Dockerize Neo4j run this command in a PowerShell
    ```
    docker run -p 7474:7474 -p 7687:7687 --name neo4j-apoc --env='NEO4J_PLUGINS=[\"apoc\"]' --env=NEO4J_AUTH=****/**** neo4j:latest
    ```

<p align="right">(<a href="#readme-top">back to top</a>)</p>

### Deploy with Docker

1) Deploy to AZURE

1. Changer target in setupProxy.js in frontend file

2. Build the image

    ```sh
    docker-compose build
    ```

3. Sign in 

    ```sh
   docker login claudieregistry.azurecr.io
    ```

4. Tag Frontend
    
    ```sh
   docker tag react-frontend:latest claudieregistry.azurecr.io/react-frontend:latest
    ```

5. Tag Backend

    ```sh
    docker tag flask-backend:latest claudieregistry.azurecr.io/flask-backend:latest
    ```

6. Push the images

    ```sh
    docker push claudieregistry.azurecr.io/react-frontend:latest
    docker push claudieregistry.azurecr.io/flask-backend:latest
    ```

<p align="right">(<a href="#readme-top">back to top</a>)</p>

<!-- USAGE EXAMPLES -->
## Usage

Use this space to show useful examples of how a project can be used. Additional screenshots, code examples and demos work well in this space. You may also link to more resources.

For more examples, please refer to the [Documentation](https://example.com)

<p align="right">(<a href="#readme-top">back to top</a>)</p>



<!-- ROADMAP -->
## Roadmap

- [ ] Feature 1
- [ ] Feature 2
- [ ] Feature 3
    - [ ] Nested Feature

See the [open issues](https://github.com/github_username/repo_name/issues) for a full list of proposed features (and known issues).

<p align="right">(<a href="#readme-top">back to top</a>)</p>



<!-- CONTRIBUTING -->
## Contributing

Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.

If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag "enhancement".
Don't forget to give the project a star! Thanks again!

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

<p align="right">(<a href="#readme-top">back to top</a>)</p>



<!-- LICENSE -->
## License

Distributed under the MIT License. See `LICENSE.txt` for more information.

<p align="right">(<a href="#readme-top">back to top</a>)</p>



<!-- CONTACT -->
## Contact

Your Name - email@email_client.com

Project Link: [https://github.com/github_username/repo_name](https://github.com/github_username/repo_name)

<p align="right">(<a href="#readme-top">back to top</a>)</p>



<!-- ACKNOWLEDGMENTS -->
## Acknowledgments


<p align="right">(<a href="#readme-top">back to top</a>)</p>


